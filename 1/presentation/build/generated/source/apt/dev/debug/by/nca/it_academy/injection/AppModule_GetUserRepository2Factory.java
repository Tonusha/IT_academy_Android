// Generated by Dagger (https://google.github.io/dagger).
package by.nca.it_academy.injection;

import android.content.Context;
import by.nca.domain.repository.UserRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_GetUserRepository2Factory implements Factory<UserRepository> {
  private final AppModule module;

  private final Provider<Context> contextProvider;

  public AppModule_GetUserRepository2Factory(AppModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public UserRepository get() {
    return Preconditions.checkNotNull(
        module.getUserRepository2(contextProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static AppModule_GetUserRepository2Factory create(
      AppModule module, Provider<Context> contextProvider) {
    return new AppModule_GetUserRepository2Factory(module, contextProvider);
  }

  public static UserRepository proxyGetUserRepository2(AppModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.getUserRepository2(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
